import nodemailer from 'nodemailer';

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω' });
  }

  try {
    const { fullName, phone, email, additionalPhone, comment, deliveryMethod, deliveryAddress, cart, totalAmount } = req.body;

    if (!fullName || !phone || !cart.length) {
      return res.status(400).json({ message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    let orderDetails = `üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç ${fullName}\n\n`;
    cart.forEach((item, index) => {
      orderDetails += `${index + 1}. ${item.translatedName} - ${item.quantity} —à—Ç. (${item.price} ‚Ç∏)\n`;
    });

    orderDetails += `\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount} ‚Ç∏`;
    orderDetails += `\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`;
    if (additionalPhone) orderDetails += `\nüìû –î–æ–ø. —Ç–µ–ª–µ—Ñ–æ–Ω: ${additionalPhone}`;
    orderDetails += `\nüöö –î–æ—Å—Ç–∞–≤–∫–∞: ${deliveryMethod === 1 ? '–°–∞–º–æ–≤—ã–≤–æ–∑' : '–î–æ—Å—Ç–∞–≤–∫–∞'}`;
    if (deliveryMethod !== 1) orderDetails += `\nüìç –ê–¥—Ä–µ—Å: ${deliveryAddress}`;
    if (comment) orderDetails += `\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`;
    if (email) orderDetails += `\n‚úâÔ∏è Email: ${email}`; // –¢–µ–ø–µ—Ä—å email –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SMTP-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER, // –ü–æ—á—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        pass: process.env.EMAIL_PASS, // –ü–∞—Ä–æ–ª—å –∏–ª–∏ App Password
      },
    });

    // –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†)
    const recipients = [
      'kail.dead.kd@gmail.com', // –û—Å–Ω–æ–≤–Ω–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
      process.env.ADMIN_EMAIL    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    ].filter(Boolean); // –ò—Å–∫–ª—é—á–∞–µ—Ç –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –∞–¥–º–∏–Ω—É
    await transporter.sendMail({
      from: `"–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω" <${process.env.EMAIL_USER}>`,
      to: recipients.join(', '), // –í—Å–µ email —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
      subject: '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
      text: orderDetails,
    });

    return res.status(200).json({ message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:', error);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
}
